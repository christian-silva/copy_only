/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package copyonly;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
//import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Christian Silva
 */
public final class TelaCopiaArquivo extends javax.swing.JFrame {

    /**
     * Creates new form TelaCopiaArquivo
     */
    private String localXMLOrigem;
    private String localArquivoDestino;
    private String extensaoArquivo;
    private String xmlGerarDanfe = null;
    private String localXML = null;
    private boolean localOrigemSetado;
    private boolean localDestinoSetado;

    private ArrayList<Path> xmlParaImportacao;

    public String getExtensaoArquivo() {
        return extensaoArquivo;
    }

    public void setExtensaoArquivo(String extensaoArquivo) {
        this.extensaoArquivo = extensaoArquivo;
    }

    public String getLocalXMLOrigem() {
        return localXMLOrigem;
    }

    public void setLocalXMLOrigem(String localXMLOrigem) {
        this.localXMLOrigem = localXMLOrigem;
    }

    public String getLocalArquivoDestino() {
        return localArquivoDestino;
    }

    public void setLocalArquivoDestino(String localDANFEDestino) {
        this.localArquivoDestino = localDANFEDestino;
    }

    public boolean isLocalOrigemSetado() {
        return localOrigemSetado;
    }

    public void setLocalOrigemSetado(boolean localOrigemSetado) {
        this.localOrigemSetado = localOrigemSetado;
    }

    public boolean isLocalDestinoSetado() {
        return localDestinoSetado;
    }

    public void setLocalDestinoSetado(boolean localDestinoSetado) {
        this.localDestinoSetado = localDestinoSetado;
    }

    public String getXmlGerarDanfe() {
        return xmlGerarDanfe;
    }

    public void setXmlGerarDanfe(String xmlGerarDanfe) {
        this.xmlGerarDanfe = xmlGerarDanfe;
    }

    public String getLocalXML() {
        return localXML;
    }

    public void setLocalXML(String localXMLPC) {
        this.localXML = localXMLPC;
    }

    public TelaCopiaArquivo() {

        initComponents();
        setLocationRelativeTo(null);

        xmlParaImportacao = new ArrayList<>();

        setLocalOrigemSetado(false);
        setLocalDestinoSetado(false);

        /**
         * Cria o evento de fechar a janela interna com o ESC
         */
        try {
            KeyStroke escapeKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
            Action escapeAction = new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    dispose();
                }
            };
            getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeKeyStroke, "ESCAPE");
            getRootPane().getActionMap().put("ESCAPE", escapeAction);
        } catch (Exception e) {
            System.out.println("Não foi possível utilizar o recurso de fechar o JInternalFrame com o ESC.");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotao = new javax.swing.ButtonGroup();
        painelLotePDF = new javax.swing.JPanel();
        botaoSelecionarXMLs = new javax.swing.JButton();
        botaoPastaDestino = new javax.swing.JButton();
        jLabelInformacaoNovo = new javax.swing.JLabel();
        jLabelInformacaoLocal = new javax.swing.JLabel();
        jLabelLocalXML = new javax.swing.JLabel();
        jLabelLocalDestino = new javax.swing.JLabel();
        barraProgresso = new javax.swing.JProgressBar();
        botaoCopiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textoExtensaoArquivo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Copia arquivos de uma extensão específica da pasta raiz e subpastas.");
        setResizable(false);

        botaoSelecionarXMLs.setText("Selecionar Pasta de Origem");
        botaoSelecionarXMLs.setPreferredSize(new java.awt.Dimension(165, 22));
        botaoSelecionarXMLs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarXMLsActionPerformed(evt);
            }
        });

        botaoPastaDestino.setText("Selecionar Pasta de Destino");
        botaoPastaDestino.setPreferredSize(new java.awt.Dimension(165, 22));
        botaoPastaDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPastaDestinoActionPerformed(evt);
            }
        });

        jLabelInformacaoNovo.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabelInformacaoNovo.setText("Pasta de Destino:");

        jLabelInformacaoLocal.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jLabelInformacaoLocal.setText("Pasta de Origem:");

        jLabelLocalXML.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelLocalXML.setText("local origem");
        jLabelLocalXML.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelLocalXMLMouseClicked(evt);
            }
        });

        jLabelLocalDestino.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelLocalDestino.setText("local destino");
        jLabelLocalDestino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelLocalDestinoMouseClicked(evt);
            }
        });

        barraProgresso.setStringPainted(true);

        botaoCopiar.setText("Copiar");
        botaoCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCopiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelLotePDFLayout = new javax.swing.GroupLayout(painelLotePDF);
        painelLotePDF.setLayout(painelLotePDFLayout);
        painelLotePDFLayout.setHorizontalGroup(
            painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLotePDFLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelLotePDFLayout.createSequentialGroup()
                        .addGroup(painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botaoSelecionarXMLs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoPastaDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelInformacaoLocal, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelInformacaoNovo, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelLocalXML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelLocalDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(painelLotePDFLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        painelLotePDFLayout.setVerticalGroup(
            painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelLotePDFLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelInformacaoLocal)
                    .addComponent(botaoSelecionarXMLs, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelLocalXML))
                .addGap(12, 12, 12)
                .addGroup(painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelInformacaoNovo)
                    .addComponent(jLabelLocalDestino)
                    .addComponent(botaoPastaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(painelLotePDFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barraProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(botaoCopiar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Extensão do Arquivo:");

        textoExtensaoArquivo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        textoExtensaoArquivo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textoExtensaoArquivo.setToolTipText("Ex.: .xml ou .pdf ou .rec");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(painelLotePDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoExtensaoArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(270, 270, 270))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoExtensaoArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(painelLotePDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoSelecionarXMLsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarXMLsActionPerformed

        /**
         * Responsável por abrir uma janela
         */
        JFileChooser abrir = new JFileChooser();
        String nomeUsuarioSistema = System.getProperty("user.name");
        File novoDiretorio = new File("C:/Users/" + nomeUsuarioSistema + "/Desktop/");
        if (novoDiretorio.exists()) {
            abrir.setCurrentDirectory(novoDiretorio);
        } else {
            novoDiretorio = new File("D:/Desktop/");
            abrir.setCurrentDirectory(novoDiretorio);
        }
        xmlParaImportacao = new ArrayList<>();
        abrir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int verificacao = abrir.showOpenDialog(this);
        if (verificacao == JFileChooser.APPROVE_OPTION) {
            setLocalXMLOrigem(abrir.getSelectedFile().toString());
            setLabelOrigemArquivo(getLocalXMLOrigem());
            setLocalOrigemSetado(true);
        } else {
            setLocalOrigemSetado(false);
        }
    }//GEN-LAST:event_botaoSelecionarXMLsActionPerformed

    public void setLabelOrigemArquivo(String txt) {
        jLabelLocalXML.setText(txt);
    }

    private void botaoPastaDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPastaDestinoActionPerformed
        /**
         * Responsável por abrir uma janela
         */
        String nomeUsuarioSistema = System.getProperty("user.name");
        JFileChooser abrir = new JFileChooser();
        File novoDiretorio = new File("C:/Users/" + nomeUsuarioSistema + "/Desktop/");
        if (novoDiretorio.exists()) {
            abrir.setCurrentDirectory(novoDiretorio);
        } else {
            novoDiretorio = new File("D:/Desktop/");
            abrir.setCurrentDirectory(novoDiretorio);
        }

        abrir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int verificacao = abrir.showOpenDialog(this);
        if (verificacao == JFileChooser.APPROVE_OPTION) {
            // Mostra os labels
            //System.out.println("Caminho: " + abrir.getSelectedFile());
            setLocalArquivoDestino(abrir.getSelectedFile().toString());
            setLabelDestinoArquivo(getLocalArquivoDestino());
            setLocalDestinoSetado(true);

        }
    }//GEN-LAST:event_botaoPastaDestinoActionPerformed

    public void setLabelDestinoArquivo(String txt) {
        jLabelLocalDestino.setText(txt);
    }

    public void setTextoExtensaoArquivo(String txt) {
        textoExtensaoArquivo.setText(txt);
    }

    private void botaoCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCopiarActionPerformed
        String extensao = textoExtensaoArquivo.getText().trim();
        setExtensaoArquivo(extensao);

        if (!getExtensaoArquivo().isEmpty() && isLocalOrigemSetado() && isLocalDestinoSetado()) {
            CopyOnlyFiles(false);
        } else {
            JOptionPane.showMessageDialog(this, "Selecione as pastas de origem, destino ou a extensão do arquivo.", "Importação / Exportação", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_botaoCopiarActionPerformed

    private void jLabelLocalDestinoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelLocalDestinoMouseClicked
        try {
            Runtime.getRuntime().exec("explorer " + getLocalArquivoDestino());
        } catch (IOException ex) {
            Logger.getLogger(ex.getMessage());
        }
    }//GEN-LAST:event_jLabelLocalDestinoMouseClicked

    private void jLabelLocalXMLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelLocalXMLMouseClicked
        try {
            Runtime.getRuntime().exec("explorer " + getLocalXMLOrigem());
        } catch (IOException ex) {
            Logger.getLogger(ex.getMessage());
        }
    }//GEN-LAST:event_jLabelLocalXMLMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCopiaArquivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TelaCopiaArquivo().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton botaoCopiar;
    private javax.swing.JButton botaoPastaDestino;
    private javax.swing.JButton botaoSelecionarXMLs;
    private javax.swing.ButtonGroup grupoBotao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelInformacaoLocal;
    private javax.swing.JLabel jLabelInformacaoNovo;
    private javax.swing.JLabel jLabelLocalDestino;
    private javax.swing.JLabel jLabelLocalXML;
    private javax.swing.JPanel painelLotePDF;
    private javax.swing.JTextField textoExtensaoArquivo;
    // End of variables declaration//GEN-END:variables

    public void listarXMLsDiretorio(File directory) {
        //System.out.println("FILE getAbsolutePath: " + directory.getAbsolutePath());
        if (directory.isDirectory()) {
            String[] subDirectory = directory.list();
            if (subDirectory != null) {
                for (String dir : subDirectory) {
                    String nome = directory + File.separator + dir;
                    if (nome.endsWith(getExtensaoArquivo())) {
                        File file = new File(nome);
                        xmlParaImportacao.add(file.toPath());
                    }
                    listarXMLsDiretorio(new File(directory + File.separator + dir));
                }
            }
        }
    }

    private void comecarBarraProgresso(String texto, int maximo) {
        barraProgresso.setValue(0);
        barraProgresso.setString(texto);
        //barraProgresso.setIndeterminate(true);
        barraProgresso.setMaximum(maximo);

    }

    private void setValorBarraProgresso() {
        int value = barraProgresso.getValue();
        barraProgresso.setValue(value + 1);
    }

    private void terminarBarraProgresso() {
        //barraProgresso.setIndeterminate(false);
        barraProgresso.setString("Análise Terminada");
       
    }

    private void comecarBarraProgresso(String texto) {
        barraProgresso.setValue(0);
        barraProgresso.setString(texto);
        barraProgresso.setIndeterminate(true);

    }

    private void terminarBarraProgressoIndeterminado() {
        barraProgresso.setIndeterminate(false);
        barraProgresso.setString("Análise Terminada");
    }

    public void CopyOnlyFiles(boolean terminar) {
        Thread processar = new Thread() {
            @Override
            public void run() {
                xmlParaImportacao.clear();
                comecarBarraProgresso("Processando Pasta dos Arquivos");

                listarXMLsDiretorio(new File(getLocalXMLOrigem()));

                terminarBarraProgressoIndeterminado();

                comecarBarraProgresso("Processando ", xmlParaImportacao.size());

                System.out.println("Numero de Arquivos encontrado: " + xmlParaImportacao.size());
                for (Path origem : xmlParaImportacao) {
                    Path destino = Paths.get(getLocalArquivoDestino() + "\\" + origem.getFileName());
                    try {
                        Files.copy(origem, destino, StandardCopyOption.COPY_ATTRIBUTES);
                        System.out.println(" Arquivo Copiado: " + origem.getFileName());
                    } catch (IOException ex) {
                        //System.err.println(" ERRO ao Copiar > " + ex);
                    }
                    setValorBarraProgresso();
                }

                terminarBarraProgresso();
                
                if(terminar){
                    System.exit(0);
                }
            
            }
        };
        processar.start();
    }
}
